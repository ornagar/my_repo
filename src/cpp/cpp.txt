cpp worksheet questions.

1.
    c has automatic type conversion so it can compile it, and c++ does not.

2.
    const int a; /* משתנה קבוע מסוג אינט  */
    int const b; /* אותו דבר */
    int const *i; /* אי אפשר לשנות את הערך שעליו מצביעים, כן אפשר לשנות את הפוינטר */
    struct X *const c; /* פוינטר קבוע למשתנה מסוג struct X */
    struct X const d; /* משתנה קבוע מסוג struct X */
    const struct X *e; /* פוינטר למשתנה קבוע מסוג struct X */
    const struct X* * const f; /* פיונטר קבוע לפוינטר למשתנה קבוע  struct X */
    int const * (*const g )(int *) = foo; /* פוינטר לפונקציה שמחזירה משתנה קבוע ???*/

    We can see that c++ has much more type checking then c. It also does not have
    automatic type conversion.

3.
    In c enum is just another way to represent an int. In c++ an enum is a 
    different type and has a type check, e.g it cannot be assigned with an int.
    
    If an enum is not initialized it recieves a garbage value that can be 
    out of it's options, Which means that if we don't initialize an enum it does
    not type checked.
    
4. 
    A bool can be initialized or assigned any value but it will take 1 
    for any value exept 0, then it will take 0. If the variable is not 
    initialized it will take a garbage value between 1 and 0.
    
5. 
    static_cast<type>var - Converts an object type to another but the conversion
    must be defined in the class. Can work on any type.
    
    const_cast - Works only on pointers or references. It can work only on the 
    same type but must be used to cast from const to non-const.
    Can work only on same type.
    
    reinterpret_cast - reinterprets the bits from one type of pointer to another
    one, and can work on any type. 
    The advantage is that it works for every conversion but is very dangerous 
    because it can do stupid things.
    
6.
    In c++ funcion declaration is mandatory, calling a function before declaring 
    it will cause a compilation error.
    
7.
    The advantage is readability, you declare a variable just when you need it.
    Another advantage is in really big blocks you do not waste space for
    variables before needed.

8. 
    Malloc, delete, new and free can be used together and they will work, but 
    they produce a memcheck error seen in valgrind.
    
9.

10. 
    For function overloading, and to give the user an option to work with 
    default parameters.
    
11.
    //line comment.
    
12.
    The problem with Foo(); is that it's been declared in both namespaces that 
    are used so the compiler doesn't know which one to choose.

13.
    
14.
    In c it will work, in c++ it will compile but the behavior is undefind.
    A const in the global scope will be writen in read only data section so
    it will be guarded by the os, trying to change it will cause a segmentation 
    fault.
    
15.
    An inline function asks the compiler to expand it in line (in the calling 
    function stack). Doing that the program saves a lot of overheads like, 
    function call overhead (push data to the stack, saving registers etc..), 
    return value's overhead, and more.
    -O is the gcc flag for optimization of the code.
    
16.
    I so in the nm's output that each different reference to the template 
    function creates another function definition on the text segment
    The casting seems to be implicitly choosen by the compiler if no type 
    is choosen.
    
17.
    Template specialization is overiding the template function so it will be
    called every time the specialized type is entered as parameter instead of 
    the original template function or class.
    
18.
    References in c++ are like pointers with more protection (they are actualy
    implemented with pointers). The differences are:
        1. They are assigned just once.
        2. After assigning a variable to a reference it cannot be reasigned.
        3. It's impossible to iterate throw addresses with reference like we 
        with pointers for arrays and data structures.
        4. It's impossible to assigne NULL to a reference so it's safer.
        5. A reference must be initialized so it cannot become something like a
        dangling pointer.
    //why non const reference function parameters are evil?
    
19.
    //TODO: understand the question.

20, 21, 22, 23.
    In both questions we learn about constructors, destructors, operator 
    overloading and about their behaviour.
    Constructors are called at struct/class initialization, there are default 
    Ctors, parameterized Ctors and Copy Ctors. 
    Destructors are called by the process at the end of their scope or by 
    specificly calling delete on a pointer to struct/class. At scope exit the 
    Dtors are called in reversed order than the initialization order, i think 
    it makes sense because of the way the stack works.
    Operator overloading is a way to give special meaning to the standart 
    operators in the language. The way we use the operators on classes looks the 
    same as their normal usage, but the compiler translates it to something that
    looks more like function calling where the operator serves as the function 
    name. example: X a = b becomes X a.=(b).
    //didn't understand the thing with the explicit.

24.
    Member functions do not affect the sizeof class/struct.
    The differencre between member functions and members that are pointers to 
    functions is the protection, meaning that a member function belongs to a 
    class and cannot be used for other structs/classes.
    The calling instance is the one affected by member functions.

25.
    In c you can declare a struct as const then it's variables will always be 
    constatnt, if you declare a normal struct and then define an instance as 
    const then only that instance and his variables will be const.
    In c++ member functions can be declared as const like bar, then Bar cannot 
    make changes on variables of that struct. The reason we could change the 
    value of *m_p is that the pointer of m_p is protected by const but not the 
    value it points to.
    The only constructor we built for class X takes a parameter and does not 
    have a default constructor.

26.
    We will use global operators only when we don't need access to members of 
    the class.
    We need the class X declaration because before the class definition we 
    defined two functions that call X's instances.
    Friend functions are functions that aren't member functions of the class 
    but can access private members of the class.
    We do not need the forward declaration of operator<< because friend 
    functions can be declared inside the class.

27.
    We can call Foo with an int thanks to implicit conversion, if we would add 
    explicit keyword to the constructor we would cancel this option.
    The operator int() creates a conversion from class X to int.
    In this case it does not creates problems but by default we will call 
    constructors with explicit keyword.
    The const here is not important because it is a call by value and not 
    reference.
    If we make Foo take a reference to class X then the compiler wants to see 
    an instance of X sent to the function and not an int that will convert to 
    a temporary X and then dissapear.

28.
    a.
    A static member inside a class becomes a static variable inside the class's
    namespace, so it can be changed by any instance of that class and every 
    instance see's the same static variable. 
    We need to initialize the static member outside the class declaration in 
    order to assign memory for it.
    All static variables are initialized with zero if not explicitly initialized,
    all of them have one instance in the compilation unit, they all are local to
    the compilation unit.
    b.
    Static member functions also belong to the class rather then to an instance.
    they can be called using the scope resolution of the class or by an instance 
    but it is not recomended. The static member functions do not have this 
    pointer. They can access only static members of the class.
    syntax: X::static_func() , x.static_func.
    
29.
    