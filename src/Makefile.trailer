#RD3 11.12.2014

DBG_LIBS := $(PROJ_LIBS:%=%.dbg) $(LIBS)
LIBS := $(PROJ_LIBS) $(LIBS)

LIB_NAME = lib$(MODULE).so
DBG_LIB_NAME = lib$(MODULE).dbg.so

#added to be used by clean. does NOT remove for c++.
# (WARNING: don't do  ' INC_DIR_NAME= *.h *.hh' )
OBJS_DIR_NAME = *.o
INC_DIR_C_NAME = *.h
INC_DIR_CPP_NAME = *.hh
BIN_DIR_NAME = *.out 

FILE_ROOTS = $(CFILE_ROOTS) $(CPPFILE_ROOTS)
	
OBJS = $(FILE_ROOTS:%=%.o)

CDBG_OBJS = $(CFILE_ROOTS:%=%.dbg.o)
CPPDBG_OBJS = $(CPPFILE_ROOTS:%=%.dbg.o)
DBG_OBJS = $(CDBG_OBJS) $(CPPDBG_OBJS)

CINC_FILES = $(STAND_ALONE_H_FILES:%=$(PWD)/%.h) $(CFILE_ROOTS:%=$(PWD)/%.h)
CSRC_FILES = $(CFILE_ROOTS:%=%.c)

CPPINC_FILES = $(STAND_ALONE_CPPH_FILES:%=$(PWD)/%.hh) $(CPPFILE_ROOTS:%=$(PWD)/%.hh)
CPPSRC_FILES = $(CPPFILE_ROOTS:%=%.cc)

INC_FILES = $(CINC_FILES) $(CPPINC_FILES)
SRC_FILES = $(CSRC_FILES) $(CPPSRC_FILES)

TEST_NAME = test$(MODULE).out
TEST_FILES = $(FILE_ROOTS:%=%_test.out)
DBG_TEST_NAME = test$(MODULE).dbg.out
DBG_TEST_FILES = $(FILE_ROOTS:%=%_test.dbg.out)

.PHONY: all
all: include debug release

.PHONY: debug
debug: $(DBG_LIB_NAME) $(DBG_TEST_FILES)

.PHONY: release
release: $(LIB_NAME) $(TEST_FILES) 

.PHONY: test
test: libs $(TEST_NAME) $(TEST_FILES) $(DBG_TEST_NAME) $(DBG_TEST_FILES)

.PHONY: include
include: 
	$(LN) $(INC_FILES) $(INC_DIR)


#there should be a way to not have make include run when the links already exist...
depend: 
	$(CC) -MM $(SRC_FILES) &2> /dev/null

libs: $(LIB_NAME) $(DBG_LIB_NAME)

$(TEST_NAME): $(LIB_NAME) z
	if echo $(@) | $(GREP) -q '.cc$'; then
		$(CPP) $(CPPFLAGS) $(CPPRELEASE_FLAGS) test$(MODULE).o $(LDFLAGS) $(LIBS) -o $(@)
	else
		$(CC) $(CFLAGS) $(RELEASE_FLAGS) test$(MODULE).o $(LDFLAGS) $(LIBS) -o $(@)
	fi
	$(LN) $(PWD)/$(@) $(BIN_DIR)

$(DBG_TEST_LIBSNAME): $(DBG_LIB_NAME) 
	if echo $(@) | $(GREP) -q '.cc$'; then
		$(CPP) $(CPPFLAGS) $(CPPDEBUG_FLAGS) test$(MODULE).o $(LDFLAGS) $(DBG_LIBS) -o $(@)
	else
		$(CC) $(CFLAGS) $(DEBUG_FLAGS) test$(MODULE).o $(LDFLAGS) $(DBG_LIBS) -o $(@)
	fi
	$(LN) $(PWD)/$(@) $(BIN_DIR)

$(LIB_NAME): $(OBJS) 
	$(AR) $(@) $(OBJS)
	$(LN) $(PWD)/$(@) $(LIB_DIR)

$(DBG_LIB_NAME): $(DBG_OBJS) 
	$(AR) $(@) $(DBG_OBJS) 			
	$(LN) $(PWD)/$(@) $(LIB_DIR)

.PHONY: clean
clean:
	$(RM) *.o *.a *~ $(TEST_NAME) $(LIB_DIR)/$(LIB_NAME) $(LIB_DIR)/$(DBG_LIB_NAME) \
	*.bak *.out core \
	$(OBJ_DIR)/$(OBJS_DIR_NAME) $(BIN_DIR)/$(BIN_DIR_NAME) $(INC_DIR)/$(INC_DIR_C_NAME) $(INC_DIR)/$(INC_DIR_CPP_NAME)	

# release objects:
.c.o: $*.h 
	$(CC) $(CFLAGS) $(RELEASE_FLAGS) -c $*.c -o $(@)
	$(LN) $(PWD)/$(@) $(OBJ_DIR)
	

# debug objects:
$(CDBG_OBJS): %.dbg.o: %.h 
$(CDBG_OBJS): %.dbg.o: %.c 
	$(CC) $(CFLAGS) $(DEBUG_FLAGS) -c $*.c -o $(@)
	$(LN) $(PWD)/$(@) $(OBJ_DIR)


#this is for CPP files
# release objects:
#.cc.o: $*.hh 
#	$(CPP) $(CPPFLAGS) $(CPPRELEASE_FLAGS) -c $*.cc -o $(@)
#	$(LN) $(PWD)/$(@) $(OBJ_DIR)

# debug objects:
#$(CPPDBG_OBJS): %.dbg.o: %.hh 
#$(CPPDBG_OBJS): %.dbg.o: %.cc 
#	$(CPP) $(CPPFLAGS) $(CPPDEBUG_FLAGS) -c $*.cc -o $(@)
#	$(LN) $(PWD)/$(@) $(OBJ_DIR)

# I've changed all "CPP" to "CC" below this level
#
#test%.out: test%.o $(LIB_NAME) 
#	$(CPP) $(CPPFLAGS) $(CPPRELEASE_FLAGS) $< $(LDFLAGS) $(LIBS) -o $(@)
#	$(LN) $(PWD)/$(@) $(BIN_DIR)
#
#test%.dbg.out: test%.o $(DBG_LIB_NAME) 
#	$(CPP) $(CPPFLAGS) $(CPPDEBUG_FLAGS) $< $(LDFLAGS) $(DBG_LIBS) -o $(@)
#	$(LN) $(PWD)/$(@) $(BIN_DIR)
#


%_test.out: %_test.c $(LIB_NAME) 
	$(CC) $(CFLAGS) $(RELEASE_FLAGS) $< $(LDFLAGS) $(LIBS) -o $(@)
	$(LN) $(PWD)/$(@) $(BIN_DIR)

%_test.dbg.out: %_test.c $(DBG_LIB_NAME) 
	$(CC) $(CFLAGS) $(DEBUG_FLAGS) $< $(LDFLAGS) $(DBG_LIBS) -o $(@)
	$(LN) $(PWD)/$(@) $(BIN_DIR)

