import java.lang.reflect.Type;
//import java.lang.reflect.TypeVariable;
//import java.util.Arrays;
//import java.util.ArrayList;
//import java.util.List;
//import static java.lang.System.out;
//import java.lang.annotation.Annotation;
import java.lang.reflect.Modifier;
import java.lang.reflect.Member;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;

public class Main {
	public static void main(String[] args) {
		ObjectAnalyzer an;
		try {
			an = new ObjectAnalyzer("Foo", "Foo$InnerFoo");
			
			/*an.printAncestor();
			an.printInterfaces();
			an.printModifiers();
			//an.printMembers();
			*/
			Object obj = an.newInstance();
			
			if (obj == null) {
				System.out.println("newInstatnce failure");
				return;
			}
			
			Method[] methods = an.getMethods();
			System.out.println("Object of type: " + obj.toString() + " invoking method: " + methods[0].getName());
			methods[0].setAccessible(true);
			methods[0].invoke(obj);
			
			Object inner = an.newInnerInstance(obj);
			if (inner == null) {
				System.out.println("newInstatnce failure");
				return;
			}
			
			Method[] innerMethods = an.getInnerMethods();
			System.out.println("Object of type: " + inner.toString() + " invoking method: " + innerMethods[3].getName());
			innerMethods[3].setAccessible(true);
			
			
		
		} catch (ClassNotFoundException ex) {
			ex.printStackTrace();
		} catch (NullPointerException ex) {
			ex.printStackTrace();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		
		
	}
}