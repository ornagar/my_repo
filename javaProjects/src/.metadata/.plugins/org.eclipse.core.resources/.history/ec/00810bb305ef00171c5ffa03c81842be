/**
 * 
 */
package il.co.ilrd;

import java.io.Serializable;
import java.util.ConcurrentModificationException;
import java.util.Iterator;


/**
 * @author Or Nagar
 *
 */
public class LinkedList<E> 
implements Iterable<E> {
	
	private volatile int modLinkedListIncrement = 0;
	private Node tail = new Node();
	private Node head = tail;
	
	public boolean isEmpty() {
		return head == tail;
	}
	
	public void pushFront(E data) {
		modLinkedListIncrement += 1;
		head = new Node(data, head);//TODO: every push pop 
	}
	
	public Object popFront() {
		modLinkedListIncrement += 1;
		Object data = head.data;
		head = head.next;
		return data;
	}
	
	public ListIter begin() {
		return new ListIter(this);
	}
	
	public ListIter find(Object data) {
		ListIter iter = new ListIter();
		Node runner = head;
		while (runner != tail) {
			if (runner.data.equals(data)) {
				iter.current = runner;
				break;
			}
			runner = runner.next; 
		}
		return iter;
	}
	
	private class Node {
		private Node next;
		private E data;
		
		private Node() {}
		
		public Node(E data, Node next) {
			this.data = data;
			this.next = next; 
		}
	}
	
	public class ListIter implements Iterator<E> {
		private Node current;
		private volatile int iterCheckNum = modLinkedListIncrement;
		
		public ListIter() {
			
		}
		
		public ListIter(LinkedList<E> list) {
			current = list.head;
		}
		
		public ListIter(ListIter other) {
			current = other.current;
		}
		
		public E getData() {
			return current.data;
		}
		
		@Override
		public boolean hasNext() {
			return current.next.data != null;
		}

		@Override
		public E next() {
			if (iterCheckNum != modLinkedListIncrement) {
				throw new ConcurrentModificationException();
			}
			current = current.next;
			return current.data;
		}
	}

	@Override
	public Iterator<E> iterator() {
		return new ListIter(this);
	}
}
